// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoppingOnline.Context;

namespace ShoppingOnline.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20200831113318_AddedAvatar")]
    partial class AddedAvatar
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShoppingOnline.Models.AvatarProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileRef")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProfileRef")
                        .IsUnique();

                    b.ToTable("AvatarProfile");
                });

            modelBuilder.Entity("ShoppingOnline.Models.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileRef")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProfileRef");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ShoppingOnline.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProfileRef")
                        .HasColumnType("int");

                    b.Property<double>("TotalSum")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("ProfileRef");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ShoppingOnline.Models.OrdersItems", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderRef")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OrderRef");

                    b.ToTable("OrdersItems");
                });

            modelBuilder.Entity("ShoppingOnline.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CodeProduct = "00-00044898-002",
                            Discount = 100.0,
                            Name = "Xiaomi Redmi 8A",
                            Price = 2099.0
                        },
                        new
                        {
                            ID = 2,
                            CodeProduct = "00-00036714-012",
                            Discount = 2000.0,
                            Name = "Apple iPhone XS",
                            Price = 14499.0
                        },
                        new
                        {
                            ID = 3,
                            CodeProduct = "00-00045830-003",
                            Discount = 200.0,
                            Name = "Samsung Galaxy A71 A715",
                            Price = 8299.0
                        },
                        new
                        {
                            ID = 4,
                            CodeProduct = "00-00044893-001",
                            Discount = 0.0,
                            Name = "Samsung Galaxy M30s M307",
                            Price = 4999.0
                        },
                        new
                        {
                            ID = 5,
                            CodeProduct = "00-00044504-001",
                            Discount = 3500.0,
                            Name = "Asus Zenfone 6 ZE630KL",
                            Price = 9999.0
                        },
                        new
                        {
                            ID = 6,
                            CodeProduct = "00-00044328-002",
                            Discount = 1500.0,
                            Name = "Sony Xperia 1 J9110",
                            Price = 15499.0
                        },
                        new
                        {
                            ID = 7,
                            CodeProduct = "00-00036476-003",
                            Discount = 100.0,
                            Name = "Nokia 5.1",
                            Price = 1999.0
                        });
                });

            modelBuilder.Entity("ShoppingOnline.Models.ProductDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccumulatorBattery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayDiagonal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayResolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMemoryCardSupport")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWiFi")
                        .HasColumnType("bit");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("RearCamera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenMatrixType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondChamber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("ShoppingOnline.Models.ProductPicture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPicture");
                });

            modelBuilder.Entity("ShoppingOnline.Models.Profile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRef")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserRef")
                        .IsUnique();

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("ShoppingOnline.Models.Rating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductRef")
                        .HasColumnType("int");

                    b.Property<int>("ProfileRef")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductRef");

                    b.HasIndex("ProfileRef")
                        .IsUnique();

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("ShoppingOnline.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "test@test.com",
                            Password = "qwer123"
                        });
                });

            modelBuilder.Entity("ShoppingOnline.Models.AvatarProfile", b =>
                {
                    b.HasOne("ShoppingOnline.Models.Profile", "Profile")
                        .WithOne("Avatar")
                        .HasForeignKey("ShoppingOnline.Models.AvatarProfile", "ProfileRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoppingOnline.Models.Comment", b =>
                {
                    b.HasOne("ShoppingOnline.Models.Profile", "Profile")
                        .WithMany("Comments")
                        .HasForeignKey("ProfileRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoppingOnline.Models.Order", b =>
                {
                    b.HasOne("ShoppingOnline.Models.Profile", "Profile")
                        .WithMany("Orders")
                        .HasForeignKey("ProfileRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoppingOnline.Models.OrdersItems", b =>
                {
                    b.HasOne("ShoppingOnline.Models.Order", "Order")
                        .WithMany("OrdersItems")
                        .HasForeignKey("OrderRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoppingOnline.Models.ProductDetail", b =>
                {
                    b.HasOne("ShoppingOnline.Models.Product", "Product")
                        .WithOne("ProductDetail")
                        .HasForeignKey("ShoppingOnline.Models.ProductDetail", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoppingOnline.Models.ProductPicture", b =>
                {
                    b.HasOne("ShoppingOnline.Models.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoppingOnline.Models.Profile", b =>
                {
                    b.HasOne("ShoppingOnline.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("ShoppingOnline.Models.Profile", "UserRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoppingOnline.Models.Rating", b =>
                {
                    b.HasOne("ShoppingOnline.Models.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingOnline.Models.Profile", "Profile")
                        .WithOne("Rating")
                        .HasForeignKey("ShoppingOnline.Models.Rating", "ProfileRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
